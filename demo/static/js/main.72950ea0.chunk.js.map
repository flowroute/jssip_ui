{"version":3,"sources":["icon.js","button-bubble.js","keypad.js","volume.js","call-support-modal.js","serviceWorker.js","index.js"],"names":["Icon","_ref","icon","react_default","a","createElement","src","concat","process","className","alt","ButtonBubble","red","blue","green","props","Object","objectWithoutProperties","assign","type","classnames","button-bubble__red","button-bubble__blue","button-bubble__green","src_icon","defaultProps","ButtonBubbleWithLabel","_ref2","label","button_bubble_ButtonBubble","numbers","Keypad","onClick","map","number","key","value","Volume","onChange","htmlFor","id","min","max","step","CallSupportModal","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onCallToggle","_this$state","state","isCall","flowrouteClient","hangup","setState","volume","isMuted","isKeypadOpen","keysPressed","setOutputVolume","to","onCallAction","handleCallAction","onMutedToggle","getActiveCall","unmute","mute","onKeypadToggle","onHandleVolume","target","onClickKeypad","_ref3","push","sendDTMF","action","console","log","status","warn","payload","handleUserAgentAction","FlowrouteClient","debug","onUserAgentAction","start","_this$state2","onClose","length","join","src_keypad","src_button_bubble","disabled","disabledCallButton","react","src_volume","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_call_support_modal","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72950ea0.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Icon = ({ icon }) => (\n  <img\n    src={`${process.env.PUBLIC_URL}/icons/${icon}.svg`}\n    className=\"fr-icon\"\n    alt={`icon-${icon}`}\n  />\n);\n\nIcon.propTypes = {\n  icon: PropTypes.string.isRequired,\n};\n\nexport default Icon;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\nimport Icon from './icon';\n\nimport './button-bubble.scss';\n\nconst ButtonBubble = ({\n  red,\n  blue,\n  green,\n  icon,\n  ...props\n}) => (\n  <button\n    type=\"button\"\n    className={classnames(\n      'button-bubble',\n      {\n        'button-bubble__red': red,\n        'button-bubble__blue': blue,\n        'button-bubble__green': green,\n      },\n    )}\n    {...props}\n  >\n    <Icon icon={icon} />\n  </button>\n);\n\nButtonBubble.propTypes = {\n  icon: PropTypes.string.isRequired,\n  red: PropTypes.bool,\n  blue: PropTypes.bool,\n  green: PropTypes.bool,\n};\n\nButtonBubble.defaultProps = {\n  red: false,\n  blue: false,\n  green: false,\n};\n\nconst ButtonBubbleWithLabel = ({ label, ...props }) => {\n  if (!label) return ButtonBubble;\n\n  return (\n    <div className=\"button-bubble-label\">\n      <ButtonBubble {...props} />\n      <span className=\"button-bubble-label__label\">{label}</span>\n    </div>\n  );\n};\n\nButtonBubbleWithLabel.propTypes = {\n  label: PropTypes.string,\n};\n\nButtonBubbleWithLabel.defaultProps = {\n  label: '',\n};\n\n\nexport default ButtonBubbleWithLabel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './keypad.scss';\n\nconst numbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'];\n\nconst Keypad = ({ onClick }) => (\n  <div className=\"keypad\">\n    {numbers.map(number => (\n      <button\n        key={number}\n        className=\"keypad__number\"\n        type=\"button\"\n        value={number}\n        onClick={onClick}\n      >\n        {number}\n      </button>\n    ))}\n  </div>\n);\n\nKeypad.propTypes = {\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default Keypad;\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n/* eslint-disable jsx-a11y/label-has-for */\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\n\nconst Volume = ({ value, onChange }) => (\n  <div className=\"call-support__volume\">\n    <label htmlFor=\"volume\">Volume</label>\n    <input\n      type=\"range\"\n      id=\"volume\"\n      min=\"0\"\n      max=\"100\"\n      step=\"1\"\n      value={value}\n      onChange={onChange}\n    />\n  </div>\n);\n\nVolume.propTypes = {\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default Volume;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport FlowrouteClient from 'jssip_client';\nimport ButtonBubble from './button-bubble';\nimport Keypad from './keypad';\nimport Volume from './volume';\n\n\nimport './call-support-modal.scss';\n\n\nclass CallSupportModal extends React.Component {\n  static propTypes = {\n    onClose: PropTypes.func.isRequired,\n  }\n\n  static disabledCallButton(status) {\n    return status !== '' && status !== 'ended' && status !== 'registered';\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.flowrouteClient = new FlowrouteClient({\n      debug: true,\n      onUserAgentAction: this.handleUserAgentAction,\n    });\n\n    this.state = {\n      // number: '14503001085', // (VoIP Patrol)\n      // number: '12012673228', // (Julien Mobile)\n      number: '13125867146', // (FreeSwitch)\n      isCall: false,\n      isMuted: false,\n      isKeypadOpen: false,\n      volume: 100,\n      keysPressed: [],\n      status: '',\n    };\n  }\n\n  componentDidMount() {\n    this.flowrouteClient.start();\n  }\n\n  onCallToggle = () => {\n    const { isCall, number } = this.state;\n\n    if (isCall) {\n      this.flowrouteClient.hangup();\n\n      // restaure the initial config on end call\n      this.setState({\n        volume: 100,\n        isMuted: false,\n        isKeypadOpen: false,\n        keysPressed: [],\n      });\n      this.flowrouteClient.setOutputVolume(100);\n    }\n\n    if (!isCall) {\n      this.flowrouteClient.call({\n        to: number,\n        onCallAction: this.handleCallAction,\n      });\n    }\n  }\n\n  onMutedToggle = () => {\n    const { isMuted } = this.state;\n\n    this.setState({\n      isMuted: !isMuted,\n    });\n\n    if (isMuted) {\n      this.flowrouteClient.getActiveCall().unmute()\n    } else {\n      this.flowrouteClient.getActiveCall().mute()\n    }\n  }\n\n  onKeypadToggle = () => {\n    this.setState(({ isKeypadOpen }) => ({ isKeypadOpen: !isKeypadOpen }));\n  }\n\n  onHandleVolume = ({ target }) => {\n    this.setState({\n      volume: target.value,\n    });\n\n    this.flowrouteClient.setOutputVolume(target.value);\n  }\n\n  onClickKeypad = ({ target }) => {\n    const { keysPressed } = this.state;\n\n    keysPressed.push(target.value);\n\n    this.flowrouteClient.getActiveCall().sendDTMF(target.value);\n\n\n    this.setState({ keysPressed });\n  }\n\n  handleCallAction = (action) => {\n    console.log(`call action: ${action.type}`);\n    this.setState({\n      status: action.type,\n    });\n\n    switch (action.type) {\n      case 'accepted':\n      case 'confirmed':\n        this.setState({\n          isCall: true,\n        });\n        break;\n      case 'ended':\n        this.setState({\n          isCall: false,\n        });\n\n        this.setState({\n          volume: 100,\n          isMuted: false,\n          isKeypadOpen: false,\n          keysPressed: [],\n        });\n        this.flowrouteClient.setOutputVolume(100);\n        break;\n      default:\n        console.warn('Ignored call action:', action.type, action.payload);\n        break;\n    }\n  }\n\n  handleUserAgentAction = (action) => {\n    console.log(`user action: ${action.type}`);\n    this.setState({\n      status: action.type,\n    });\n  }\n\n  render() {\n    const {\n      number,\n      isCall,\n      isMuted,\n      isKeypadOpen,\n      volume,\n      keysPressed,\n      status,\n    } = this.state;\n    const { onClose } = this.props;\n\n    return (\n      <div className=\"call-support__modal\">\n        <div className=\"call-support__header\">\n          <h3>Call Support</h3>\n          <button type=\"button\" className=\"call-support__close\" onClick={onClose}>\n            <i className=\"fa fa-times\" />\n          </button>\n        </div>\n\n        <div className=\"call-support__body\">\n          <div className=\"call-support__number\">+{number}</div>\n          {status && (\n            <div className=\"call-support__status\">\n              {status}\n            </div>\n          )}\n          {isKeypadOpen && (\n            <div className=\"call-support__keypad\">\n              {!!keysPressed.length && (\n                <div className=\"call-support__display-keys\">{keysPressed.join('')}</div>\n              )}\n              <Keypad onClick={this.onClickKeypad} />\n            </div>\n          )}\n          <div className=\"call-support__actions\">\n            {!isCall && (\n              <ButtonBubble icon=\"call-start\" label=\"call\" green onClick={this.onCallToggle} disabled={CallSupportModal.disabledCallButton(status)} />\n            )}\n            {isCall && (\n              <Fragment>\n                <ButtonBubble icon=\"muted\" label={isMuted ? 'unmute' : 'mute'} blue={isMuted} onClick={this.onMutedToggle} />\n                <ButtonBubble icon=\"keypad\" label=\"keypad\" blue={isKeypadOpen} onClick={this.onKeypadToggle} />\n                <ButtonBubble icon=\"call-end\" label=\"end call\" red onClick={this.onCallToggle} />\n              </Fragment>\n            )}\n          </div>\n          {isCall && (\n            <div className=\"call-support__footer\">\n              <Volume value={volume} onChange={this.onHandleVolume} />\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default CallSupportModal;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './call-support-modal';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}